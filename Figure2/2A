getwd()
rm(list = ls())
gc()

expr = read.csv('/media/ssd2/seokjune/github/model_data/TCGA/COAD_tpm.csv', header = T, row.names = 1)
arc = read.csv('/media/ssd2/seokjune/github/model_data/Archetype/arc_data.csv', header = T, row.names = 1)
pro = read.csv('/media/ssd2/seokjune/github/model_data/Viper/coad_protein_activity.csv',header = T, row.names = 1)
pro = data.frame(t(pro))


geneset = list()
geneset[[1]] = c('SLC39A14', 'SLC39A4', 'SLC7A6', 'SLC39A1', 'SLC39A6', 'SLC39A2', 'SLC39A5', 
                 'SLC11A2', 'SLC39A3', 'SLC39A10', 'SLC39A8')
geneset[[2]] = c('SLC39A1', 'SLC39A2', 'SLC39A3', 'SLC39A4', 'SLC39A5','SLC39A6', 
                 'SLC39A8','SLC39A10','SLC39A14')
names(geneset) = c('Zinc','Zinc influx by SLC39')
pathway = gsvaParam(exprData = data.matrix(expr),geneSets = geneset)
pathway = gsva(pathway)
pathway_res = data.frame(t(pathway))
expr = data.frame(t(expr))
arc[,'Zinc'] = pathway_res[rownames(arc),'Zinc']
arc[,'SLC39'] = pathway_res[rownames(arc),'Zinc.influx.by.SLC39']
arc[,'CDX2'] = expr[rownames(arc),'CDX2']
arc[,'CD24'] = expr[rownames(arc),'CD24']
arc[,'CDX2PA'] = pro[rownames(arc),'CDX2']
colnames(arc)[1:4] = c('Arc1','Arc2','Arc3','sample')



coord.V = rbind(c(-0.5,0),c(0,0.86),c(0.5,0))
arc.simplexcoord = t( sapply(1:nrow(arc), function(i) arc[i,]$Arc1*coord.V[1,] + arc[i,]$Arc2*coord.V[2,] + arc[i,]$Arc3*coord.V[3,]))
denshighhypo = TernaryDensity(arc %>% dplyr::select(Arc2,Arc3,Arc1),resolution = 48L, direction = getOption("ternDirection",1L)) # just used to get coordinates
denshigh.cols = data.frame(Zinc = rep(NA,ncol(denshighhypo)))
for(i in 1:ncol(denshighhypo)){
  wtmp = exp( -((arc.simplexcoord[,1]- as.numeric(denshighhypo[1,i]) )**2+(arc.simplexcoord[,2]- as.numeric(denshighhypo[2,i]))**2)/2/0.1**2 ) # compute gaussian kernel
  denshigh.cols$Zinc[i] = sum(wtmp*arc$Zinc,na.rm=T)/sum(wtmp)
}
colfunc.bg = colorRampPalette(c("darkred", "white", "darkgreen")) 
denshigh.cols$Zinc.col = rev(colfunc.bg(21))[round( (denshigh.cols$Zinc-min(denshigh.cols$Zinc))/(max(denshigh.cols$Zinc)-min(denshigh.cols$Zinc))*20 )+1]
denshighhypo[3,] = denshigh.cols$Zinc.col


######## Main figure 2a
pdf("/media/ssd2/seokjune/github/Figure/Main/Fig2/a_Ternaryplot_Zinc.pdf", width = 16, height = 8)
TernaryPlot(point = "up", 
            lab.cex = 0.8, grid.minor.lines = 0,
            grid.lines = 5,
            lab.offset = 0.18,
            grid.lty = 'solid', col = rgb(0.9, 0.9, 0.9), grid.col = 'white', 
            axis.col = rgb(0.6, 0.6, 0.6), ticks.col = rgb(0.6, 0.6, 0.6),
            axis.rotate = FALSE,
            padding = 0.12,  axis.labels = F, axis.tick = F)
ColourTernary(denshighhypo, spectrum = NULL,direction = 1)
TernaryLines(list(c(0, 255, 0), rep(50,3)), col = 'grey')
TernaryLines(list(c(0, 0, 255), rep(50,3)), col = 'grey')
TernaryLines(list(c(255, 0, 0), rep(50,3)), col = 'grey')
data_points = list("A1" = c(0, 0, 255),"A2" = c(255, 0, 0),"A3" = c(0, 255, 0))
xy = CoordinatesToXY(data_points)
points(xy[1, ] + c(-sqrt(0.1**2/2),0,sqrt(0.1**2/2)), xy[2, ]+c(-sqrt(0.1**2/2),0.1,-sqrt(0.1**2/2)), 
       pch = 19, cex = 5, col = alpha(c("red2","dodger blue", "Forestgreen"),0.7))
text(xy[1, ] + c(-sqrt(0.1**2/2),0,sqrt(0.1**2/2)), xy[2, ]+c(-sqrt(0.1**2/2),0.1,-sqrt(0.1**2/2)), names(data_points), cex = 0.8, font = 2)
dev.off()
pdf("/media/ssd2/seokjune/github/Figure/Main/Fig2/a_Ternaryplot_Zinc_legend.pdf", width = 16, height = 8)
l1 = get_legend(ggplot(denshigh.cols, aes(x = Zinc, y = 1, fill = Zinc)) + geom_tile(aes(fill = Zinc), colour = "grey") + 
                  scale_fill_gradient2(low = "darkgreen", mid = "white", high = "darkred", midpoint = mean(denshigh.cols$Zinc[which(denshigh.cols$Zinc.col == "#FFFFFF")]), name = "Zinc score"))
plot_grid(l1)
dev.off()


######## Supple figure 2b
denshigh.cols = data.frame(SLC39 = rep(NA,ncol(denshighhypo)))
for(i in 1:ncol(denshighhypo)){
  wtmp = exp( -((arc.simplexcoord[,1]- as.numeric(denshighhypo[1,i]) )**2+(arc.simplexcoord[,2]- as.numeric(denshighhypo[2,i]))**2)/2/0.1**2 ) 
  denshigh.cols$SLC39[i] = sum(wtmp*arc$SLC39,na.rm=T)/sum(wtmp)
}
colfunc.bg = colorRampPalette(c("darkred", "white", "darkgreen")) #red - blue/green
denshigh.cols$SLC39.col = rev(colfunc.bg(21))[round( (denshigh.cols$SLC39-min(denshigh.cols$SLC39))/(max(denshigh.cols$SLC39)-min(denshigh.cols$SLC39))*20 )+1]
denshighhypo[3,] = denshigh.cols$SLC39.col
pdf("/media/ssd2/seokjune/github/Figure/Supple/Fig2/a_Ternaryplot_SLC39.pdf", width = 16, height = 8)
TernaryPlot(point = "up", 
            lab.cex = 0.8, grid.minor.lines = 0,
            grid.lines = 5,
            lab.offset = 0.18,
            grid.lty = 'solid', col = rgb(0.9, 0.9, 0.9), grid.col = 'white', 
            axis.col = rgb(0.6, 0.6, 0.6), ticks.col = rgb(0.6, 0.6, 0.6),
            axis.rotate = FALSE,
            padding = 0.12,  axis.labels = F, axis.tick = F)
ColourTernary(denshighhypo, spectrum = NULL,direction = 1)
TernaryLines(list(c(0, 255, 0), rep(50,3)), col = 'grey')
TernaryLines(list(c(0, 0, 255), rep(50,3)), col = 'grey')
TernaryLines(list(c(255, 0, 0), rep(50,3)), col = 'grey')
data_points = list("A1" = c(0, 0, 255),"A2" = c(255, 0, 0),"A3" = c(0, 255, 0))
xy = CoordinatesToXY(data_points)
points(xy[1, ] + c(-sqrt(0.1**2/2),0,sqrt(0.1**2/2)), xy[2, ]+c(-sqrt(0.1**2/2),0.1,-sqrt(0.1**2/2)), 
       pch = 19, cex = 5, col = alpha(c("red2","dodger blue", "Forestgreen"),0.7))
text(xy[1, ] + c(-sqrt(0.1**2/2),0,sqrt(0.1**2/2)), xy[2, ]+c(-sqrt(0.1**2/2),0.1,-sqrt(0.1**2/2)), names(data_points), cex = 0.8, font = 2)
dev.off()
pdf("/media/ssd2/seokjune/github/Figure/Supple/Fig2/a_Ternaryplot_SLC39_legend.pdf", width = 16, height = 8)
l1 = get_legend(ggplot(denshigh.cols, aes(x = SLC39, y = 1, fill = SLC39)) + geom_tile(aes(fill = SLC39), colour = "grey") + 
                  scale_fill_gradient2(low = "darkgreen", mid = "white", high = "darkred", midpoint = mean(denshigh.cols$SLC39[which(denshigh.cols$SLC39.col == "#FFFFFF")]), name = "SLC39 score"))
plot_grid(l1)
dev.off()


denshigh.cols = data.frame(CDX2 = rep(NA,ncol(denshighhypo)))
for(i in 1:ncol(denshighhypo)){
  wtmp = exp( -((arc.simplexcoord[,1]- as.numeric(denshighhypo[1,i]) )**2+(arc.simplexcoord[,2]- as.numeric(denshighhypo[2,i]))**2)/2/0.1**2 ) 
  denshigh.cols$CDX2[i] = sum(wtmp*arc$CDX2,na.rm=T)/sum(wtmp)
}
colfunc.bg = colorRampPalette(c("darkred", "white", "darkgreen")) #red - blue/green
denshigh.cols$CDX2.col = rev(colfunc.bg(21))[round( (denshigh.cols$CDX2-min(denshigh.cols$CDX2))/(max(denshigh.cols$CDX2)-min(denshigh.cols$CDX2))*20 )+1]
denshighhypo[3,] = denshigh.cols$CDX2.col
pdf("/media/ssd2/seokjune/github/Figure/Supple/Fig2/a_Ternaryplot_CDX2.pdf", width = 16, height = 8)
TernaryPlot(point = "up", 
            lab.cex = 0.8, grid.minor.lines = 0,
            grid.lines = 5,
            lab.offset = 0.18,
            grid.lty = 'solid', col = rgb(0.9, 0.9, 0.9), grid.col = 'white', 
            axis.col = rgb(0.6, 0.6, 0.6), ticks.col = rgb(0.6, 0.6, 0.6),
            axis.rotate = FALSE,
            padding = 0.12,  axis.labels = F, axis.tick = F)
ColourTernary(denshighhypo, spectrum = NULL,direction = 1)
TernaryLines(list(c(0, 255, 0), rep(50,3)), col = 'grey')
TernaryLines(list(c(0, 0, 255), rep(50,3)), col = 'grey')
TernaryLines(list(c(255, 0, 0), rep(50,3)), col = 'grey')
data_points = list("A1" = c(0, 0, 255),"A2" = c(255, 0, 0),"A3" = c(0, 255, 0))
xy = CoordinatesToXY(data_points)
points(xy[1, ] + c(-sqrt(0.1**2/2),0,sqrt(0.1**2/2)), xy[2, ]+c(-sqrt(0.1**2/2),0.1,-sqrt(0.1**2/2)), 
       pch = 19, cex = 5, col = alpha(c("red2","dodger blue", "Forestgreen"),0.7))
text(xy[1, ] + c(-sqrt(0.1**2/2),0,sqrt(0.1**2/2)), xy[2, ]+c(-sqrt(0.1**2/2),0.1,-sqrt(0.1**2/2)), names(data_points), cex = 0.8, font = 2)
dev.off()
pdf("/media/ssd2/seokjune/github/Figure/Supple/Fig2/a_Ternaryplot_CDX2_legend.pdf", width = 16, height = 8)
l1 = get_legend(ggplot(denshigh.cols, aes(x = CDX2, y = 1, fill = CDX2)) + geom_tile(aes(fill = CDX2), colour = "grey") + 
                  scale_fill_gradient2(low = "darkgreen", mid = "white", high = "darkred", midpoint = mean(denshigh.cols$CDX2[which(denshigh.cols$CDX2.col == "#FFFFFF")]), name = "CDX2 score"))
plot_grid(l1)
dev.off()


denshigh.cols = data.frame(CDX2PA = rep(NA,ncol(denshighhypo)))
for(i in 1:ncol(denshighhypo)){
  wtmp = exp( -((arc.simplexcoord[,1]- as.numeric(denshighhypo[1,i]) )**2+(arc.simplexcoord[,2]- as.numeric(denshighhypo[2,i]))**2)/2/0.1**2 ) 
  denshigh.cols$CDX2PA[i] = sum(wtmp*arc$CDX2PA,na.rm=T)/sum(wtmp)
}
colfunc.bg = colorRampPalette(c("darkred", "white", "darkgreen")) #red - blue/green
denshigh.cols$CDX2PA.col = rev(colfunc.bg(21))[round( (denshigh.cols$CDX2PA-min(denshigh.cols$CDX2PA))/(max(denshigh.cols$CDX2PA)-min(denshigh.cols$CDX2PA))*20 )+1]
denshighhypo[3,] = denshigh.cols$CDX2PA.col
pdf("/media/ssd2/seokjune/github/Figure/Supple/Fig2/a_Ternaryplot_CDX2PA.pdf", width = 16, height = 8)
TernaryPlot(point = "up", 
            lab.cex = 0.8, grid.minor.lines = 0,
            grid.lines = 5,
            lab.offset = 0.18,
            grid.lty = 'solid', col = rgb(0.9, 0.9, 0.9), grid.col = 'white', 
            axis.col = rgb(0.6, 0.6, 0.6), ticks.col = rgb(0.6, 0.6, 0.6),
            axis.rotate = FALSE,
            padding = 0.12,  axis.labels = F, axis.tick = F)
ColourTernary(denshighhypo, spectrum = NULL,direction = 1)
TernaryLines(list(c(0, 255, 0), rep(50,3)), col = 'grey')
TernaryLines(list(c(0, 0, 255), rep(50,3)), col = 'grey')
TernaryLines(list(c(255, 0, 0), rep(50,3)), col = 'grey')
data_points = list("A1" = c(0, 0, 255),"A2" = c(255, 0, 0),"A3" = c(0, 255, 0))
xy = CoordinatesToXY(data_points)
points(xy[1, ] + c(-sqrt(0.1**2/2),0,sqrt(0.1**2/2)), xy[2, ]+c(-sqrt(0.1**2/2),0.1,-sqrt(0.1**2/2)), 
       pch = 19, cex = 5, col = alpha(c("red2","dodger blue", "Forestgreen"),0.7))
text(xy[1, ] + c(-sqrt(0.1**2/2),0,sqrt(0.1**2/2)), xy[2, ]+c(-sqrt(0.1**2/2),0.1,-sqrt(0.1**2/2)), names(data_points), cex = 0.8, font = 2)
dev.off()
pdf("/media/ssd2/seokjune/github/Figure/Supple/Fig2/a_Ternaryplot_CDX2PA_legend.pdf", width = 16, height = 8)
l1 = get_legend(ggplot(denshigh.cols, aes(x = CDX2PA, y = 1, fill = CDX2PA)) + geom_tile(aes(fill = CDX2PA), colour = "grey") + 
                  scale_fill_gradient2(low = "darkgreen", mid = "white", high = "darkred", midpoint = mean(denshigh.cols$CDX2PA[which(denshigh.cols$CDX2PA.col == "#FFFFFF")]), name = "CDX2PA score"))
plot_grid(l1)
dev.off()


denshigh.cols = data.frame(CD24 = rep(NA,ncol(denshighhypo)))
for(i in 1:ncol(denshighhypo)){
  wtmp = exp( -((arc.simplexcoord[,1]- as.numeric(denshighhypo[1,i]) )**2+(arc.simplexcoord[,2]- as.numeric(denshighhypo[2,i]))**2)/2/0.1**2 ) 
  denshigh.cols$CD24[i] = sum(wtmp*arc$CD24,na.rm=T)/sum(wtmp)
}
colfunc.bg = colorRampPalette(c("darkred", "white", "darkgreen")) #red - blue/green
denshigh.cols$CD24.col = rev(colfunc.bg(21))[round( (denshigh.cols$CD24-min(denshigh.cols$CD24))/(max(denshigh.cols$CD24)-min(denshigh.cols$CD24))*20 )+1]
denshighhypo[3,] = denshigh.cols$CD24.col
pdf("/media/ssd2/seokjune/github/Figure/Supple/Fig2/a_Ternaryplot_CD24.pdf", width = 16, height = 8)
TernaryPlot(point = "up", 
            lab.cex = 0.8, grid.minor.lines = 0,
            grid.lines = 5,
            lab.offset = 0.18,
            grid.lty = 'solid', col = rgb(0.9, 0.9, 0.9), grid.col = 'white', 
            axis.col = rgb(0.6, 0.6, 0.6), ticks.col = rgb(0.6, 0.6, 0.6),
            axis.rotate = FALSE,
            padding = 0.12,  axis.labels = F, axis.tick = F)
ColourTernary(denshighhypo, spectrum = NULL,direction = 1)
TernaryLines(list(c(0, 255, 0), rep(50,3)), col = 'grey')
TernaryLines(list(c(0, 0, 255), rep(50,3)), col = 'grey')
TernaryLines(list(c(255, 0, 0), rep(50,3)), col = 'grey')
data_points = list("A1" = c(0, 0, 255),"A2" = c(255, 0, 0),"A3" = c(0, 255, 0))
xy = CoordinatesToXY(data_points)
points(xy[1, ] + c(-sqrt(0.1**2/2),0,sqrt(0.1**2/2)), xy[2, ]+c(-sqrt(0.1**2/2),0.1,-sqrt(0.1**2/2)), 
       pch = 19, cex = 5, col = alpha(c("red2","dodger blue", "Forestgreen"),0.7))
text(xy[1, ] + c(-sqrt(0.1**2/2),0,sqrt(0.1**2/2)), xy[2, ]+c(-sqrt(0.1**2/2),0.1,-sqrt(0.1**2/2)), names(data_points), cex = 0.8, font = 2)
dev.off()
pdf("/media/ssd2/seokjune/github/Figure/Supple/Fig2/a_Ternaryplot_CD24_legend.pdf", width = 16, height = 8)
l1 = get_legend(ggplot(denshigh.cols, aes(x = CD24, y = 1, fill = CD24)) + geom_tile(aes(fill = CD24), colour = "grey") + 
                  scale_fill_gradient2(low = "darkgreen", mid = "white", high = "darkred", midpoint = mean(denshigh.cols$CD24[which(denshigh.cols$CD24.col == "#FFFFFF")]), name = "CD24 score"))
plot_grid(l1)
dev.off()




expr = read.csv('/media/ssd2/seokjune/github/model_data/TCGA/COAD_expr.csv', header = T, row.names = 1)
geneset = list()
geneset[[1]] = c('SLC39A14', 'SLC39A4', 'SLC7A6', 'SLC39A1', 'SLC39A6', 'SLC39A2', 'SLC39A5', 'SLC11A2', 'SLC39A3', 'SLC39A10', 'SLC39A8')
names(geneset) = 'Zinc'
pathway = gsvaParam(exprData = data.matrix(expr),geneSets = geneset)
pathway = gsva(pathway)
pathway_res = data.frame(t(pathway))
expr = data.frame(t(expr))
expr = expr
expr = cbind(expr,pathway_res$Zinc)
colnames(expr)[58582] = 'Zinc'
target_CDX2 = c("ESRRA", "FRMD1", "IHH", "NUAK2", "OVOL1", "PRDX5", 'VAV3')
coef = c()
pval = c()
gene = c('SLC39A1','SLC39A2','SLC39A3','SLC39A4','SLC39A5','SLC39A6', 'SLC39A7',
         'SLC39A8','SLC39A9','SLC39A10','SLC39A11','SLC39A12','SLC39A13','SLC39A14',
         'CDX2','CD24',target_CDX2) 
for(i in 1:length(gene)){
  pval = c(pval,cor.test(expr[,'Zinc'],expr[,gene[i]])[[3]])
  coef = c(coef,cor.test(expr[,'Zinc'],expr[,gene[i]])[[4]])
}
TCGA_expr = data.frame(pval,coef,gene)
TCGA_expr[,'type'] = 'TCGA-expr'
PA = read.csv('/media/ssd2/seokjune/github/model_data/Viper/coad_protein_activity.csv', header = T, row.names = 1)
PA = data.frame(t(PA))
PA = cbind(PA,pathway_res$Zinc)
colnames(PA)[5172] = 'Zinc'
coef = c()
pval = c()
TCGA_PA_gene = gene[which(gene %in% colnames(PA))]
for(i in 1:length(TCGA_PA_gene)){
  pval = c(pval,cor.test(PA[,'Zinc'],PA[,TCGA_PA_gene[i]])[[3]])
  coef = c(coef,cor.test(PA[,'Zinc'],PA[,TCGA_PA_gene[i]])[[4]])
}
TCGA_PA = data.frame(pval,coef,TCGA_PA_gene)
colnames(TCGA_PA)[3] = 'gene'
TCGA_PA[,'type'] = 'TCGA-PA'


CPTAC_expr = read.csv('/media/ssd2/seokjune/github/model_data/CPTAC/rsem.txt', header = T,sep = '\t',row.names = 1)
CPTAC_pathway = gsvaParam(exprData = data.matrix(CPTAC_expr),geneSets = geneset)
CPTAC_pathway = gsva(CPTAC_pathway)
CPTAC_pathway_res = data.frame(t(CPTAC_pathway))
CPTAC_expr = data.frame(t(CPTAC_expr))
CPTAC_expr = cbind(CPTAC_expr,CPTAC_pathway_res$Zinc)
colnames(CPTAC_expr)[13483] = 'Zinc'
coef = c()
pval = c()
CPTAC_expr_gene = gene[which(gene %in% colnames(CPTAC_expr))]
for(i in 1:length(CPTAC_expr_gene)){
  pval = c(pval,cor.test(CPTAC_expr[,'Zinc'],CPTAC_expr[,CPTAC_expr_gene[i]])[[3]])
  coef = c(coef,cor.test(CPTAC_expr[,'Zinc'],CPTAC_expr[,CPTAC_expr_gene[i]])[[4]])
}
CPTAC_expr = data.frame(pval,coef,CPTAC_expr_gene)
colnames(CPTAC_expr)[3] = 'gene'
CPTAC_expr[,'type'] = 'CPTAC-expr'


CPTAC_pro = read.csv('/media/ssd2/seokjune/github/model_data/CPTAC/proteom.txt', header = T, row.names = 1, sep = '\t')
CPTAC_pro = data.frame(t(CPTAC_pro))
sample = intersect(rownames(CPTAC_pro),rownames(CPTAC_pathway_res))
CPTAC_pro = cbind(CPTAC_pro[sample,],CPTAC_pathway_res[sample,'Zinc'])
colnames(CPTAC_pro)[8068] = 'Zinc'
coef = c()
pval = c()
CPTAC_pro_gene = gene[which(gene %in% colnames(CPTAC_pro))]
for(i in 1:length(CPTAC_pro_gene)){
  pval = c(pval,cor.test(CPTAC_pro[,'Zinc'],CPTAC_pro[,CPTAC_pro_gene[i]])[[3]])
  coef = c(coef,cor.test(CPTAC_pro[,'Zinc'],CPTAC_pro[,CPTAC_pro_gene[i]])[[4]])
}
CPTAC_pro = data.frame(pval,coef,CPTAC_pro_gene)
colnames(CPTAC_pro)[3] = 'gene'
CPTAC_pro[,'type'] = 'CPTAC-pro'


total_res_df = rbind(TCGA_expr,TCGA_PA,CPTAC_expr,CPTAC_pro)
total_res_df$gene = factor(total_res_df$gene, levels = rev(gene))
total_res_df$type = factor(total_res_df$type, levels = c("TCGA-expr", "TCGA-PA", 'CPTAC-expr', 'CPTAC-pro'))

######## Main figure 2a
pdf("/media/ssd2/seokjune/github/Figure/Main/Fig2/a_corplot.pdf", width = 8, height = 12)
ggplot(total_res_df, aes(x = type, y = gene)) + theme_classic() +
  geom_point(aes(size = 100*-log10(pval), fill = coef), shape = 22,
             colour = ifelse(total_res_df$pval < 0.05, 'black', 'white')) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, na.value = 'grey',limits = c(-0.65,0.65)) +
  scale_size(range = c(9, 15)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 15),axis.text.y = element_text(hjust = 1,size = 15),
        axis.title.x = element_blank(),axis.title.y = element_blank()) 
dev.off()
